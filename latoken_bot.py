from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import os
from openai import OpenAI
from dotenv import load_dotenv
from langdetect import detect

# Load environment variables
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Initialize OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# Predefined responses in English and Russian
RESPONSES = {
    "en": {
        "what is latoken": "Latoken is a cryptocurrency exchange platform that focuses on tokenizing assets and providing liquidity for new tokens.",
        "what is the latoken hackathon": "The Latoken Hackathon is an event where developers compete to create innovative blockchain-based solutions. It's a great opportunity to showcase your skills and win prizes.",
        "how can i participate in the hackathon": "To participate in the Latoken Hackathon, visit their official website and follow the registration instructions.",
        "what are the benefits of working at latoken": "Working at Latoken offers opportunities to work on cutting-edge blockchain technology, a dynamic work environment, and competitive benefits.",
    },
    "ru": {
        "—á—Ç–æ —Ç–∞–∫–æ–µ latoken": "Latoken ‚Äî —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.",
        "—á—Ç–æ —Ç–∞–∫–æ–µ —Ö–∞–∫–∞—Ç–æ–Ω latoken": "–•–∞–∫–∞—Ç–æ–Ω Latoken ‚Äî —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–ª–æ–∫—á–µ–π–Ω–∞. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã.",
        "–∫–∞–∫ —è –º–æ–≥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µ": "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µ Latoken, –ø–æ—Å–µ—Ç–∏—Ç–µ –∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        "–∫–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –≤ latoken": "–†–∞–±–æ—Ç–∞ –≤ Latoken –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –¥–∏–Ω–∞–º–∏—á–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥–æ–π –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–º–∏ –ª—å–≥–æ—Ç–∞–º–∏.",
    },
}

# Load all files into memory
def load_files():
    files = {
        "culture_deck_en": "culture_deck.txt",
        "culture_deck_ru": "culture_deck_ru.txt",
        "hackathon_en": "hackathon.txt",
        "hackathon_ru": "hackathon_ru.txt",
        "why_latoken_en": "why_latoken.txt",
        "why_latoken_ru": "why_latoken_ru.txt",
    }
    content = {}
    for key, file_name in files.items():
        try:
            with open(file_name, "r", encoding="utf-8") as file:
                content[key] = file.read()
        except FileNotFoundError:
            content[key] = ""  # If a file is missing, use an empty string
    return content

FILE_CONTENT = load_files()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Send the image
    with open("StartMessage.png", "rb") as photo:
        await update.message.reply_photo(photo=InputFile(photo))

    # Send Russian welcome message
    await update.message.reply_text(
        "*RU* –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Ö–∞–∫–∞—Ç–æ–Ω–∞ ü§ñ\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —É–∑–Ω–∞—Ç—å –æ Latoken, –æ –Ω–∞—à–µ–º —Ö–∞–∫–∞—Ç–æ–Ω–µ –∏ Culture Deck. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! ‚òùÔ∏èü§ì",
        parse_mode="Markdown"
    )

    # Send English welcome message
    await update.message.reply_text(
        "*EN* Hackathon Help Bot ü§ñ\n\n"
        "Hello! I'm here to help you learn about Latoken, our Hackathon, and Culture Deck. Ask me anything! ‚òùÔ∏èü§ì",
        parse_mode="Markdown"
    )

    # Ask for language preference
    keyboard = [
        [
            InlineKeyboardButton("English üá¨üáß", callback_data="lang_en"),
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "*RU* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:\n"
        "*EN* Please select your preferred language:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# Handle button clicks
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # Handle language selection
    if query.data.startswith("lang_"):
        language = query.data.split("_")[1]
        context.user_data['language'] = language
        await show_main_menu_after_language(query, language)
        return

    # Get user's language preference (English is the default language)
    language = context.user_data.get('language', 'en')
    
    # Handle other buttons based on selected language
    if query.data == "about_latoken":
        message = {
            "en": "Latoken is a cryptocurrency exchange platform that focuses on tokenizing assets and providing liquidity for new tokens. Visit [our website](https://latoken.com/) and dive into the world of Latoken.",
            "ru": "Latoken - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ—Å–µ—Ç–∏—Ç–µ [–Ω–∞—à —Å–∞–π—Ç](https://latoken.com/) –∏ –æ–∫—É–Ω–∏—Ç–µ—Å—å –≤ –º–∏—Ä Latoken."
        }

        await query.edit_message_text(
            message[language],
            parse_mode="Markdown"
        )
        await show_main_menu(query, language)

    elif query.data == "hackathon_info":
        keyboard = [
            [InlineKeyboardButton(
                "Hackathon Content" if language == "en" else "–ö–æ–Ω—Ç–µ–Ω—Ç —Ö–∞–∫–∞—Ç–æ–Ω–∞", 
                callback_data="hackathon_content"
            )],
            [InlineKeyboardButton(
                "Schedule" if language == "en" else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", 
                callback_data="hackathon_schedule"
            )],
            [InlineKeyboardButton(
                "Main Menu" if language == "en" else "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="main_menu"
            )],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = {
            "en": "Choose an option to learn more about the hackathon:",
            "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–∞–∫–∞—Ç–æ–Ω–µ:"
        }
        await query.edit_message_text(
            message[language],
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "hackathon_content":
        message = {
            "en": "The hackathon content involves creating innovative AI-assisted solutions. Check our [discussion channel](https://t.me/gpt_web3_hackathon/1/10091) to learn more.",
            "ru": "–ö–æ–Ω—Ç–µ–Ω—Ç —Ö–∞–∫–∞—Ç–æ–Ω–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à [–∫–∞–Ω–∞–ª –æ–±—Å—É–∂–¥–µ–Ω–∏—è](https://t.me/gpt_web3_hackathon/1/10091), —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
        }
        await query.edit_message_text(
            message[language],
            parse_mode="Markdown"
        )
        await show_main_menu(query, language)

    elif query.data == "hackathon_schedule":
        message = {
            "en": "The hackathon will begin on Friday at 6:00 pm and end on Saturday at 5:00 pm. Please [register](https://calendly.com/latoken-career-events/ai-hackathon) and [join](https://discord.gg/2YrRvWjRTD) our live event to find out more details.",
            "ru": "–•–∞–∫–∞—Ç–æ–Ω –Ω–∞—á–Ω–µ—Ç—Å—è –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 18:00 –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ —Å—É–±–±–æ—Ç—É –≤ 17:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, [–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å](https://calendly.com/latoken-career-events/ai-hackathon) –∏ [–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å](https://discord.gg/2YrRvWjRTD) –∫ –Ω–∞—à–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."
        }
        await query.edit_message_text(
            message[language],
            parse_mode="Markdown"
        )
        await show_main_menu(query, language)

    elif query.data == "culture_deck":
        message = {
            "en": "The Latoken Culture Deck outlines the company's values, mission, and commitment to innovation. You can read it [here](https://coda.io/@latoken/latoken-talent/culture-139) and ask me your questions.",
            "ru": "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –¥–µ–∫ Latoken –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –º–∏—Å—Å–∏—é –∏ –ø—Ä–∏–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ–≥–æ [–∑–¥–µ—Å—å] (https://coda.io/@latoken/latoken-talent/culture-139) –∏ –∑–∞–¥–∞—Ç—å –º–Ω–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã."
        }
        await query.edit_message_text(
            message[language],
            parse_mode="Markdown"
        )
        await show_main_menu(query, language)

    elif query.data == "main_menu":
        await show_main_menu(query, language)

# Update show_main_menu to handle both cases
async def show_main_menu(query, language, edit_message=False):
    keyboard = [
        [InlineKeyboardButton(
            "About Latoken" if language == "en" else "–û –õ–∞—Ç–æ–∫–µ–Ω–µ", 
            callback_data="about_latoken"
        )],
        [InlineKeyboardButton(
            "Hackathon Info" if language == "en" else "–ò–Ω—Ñ–æ –æ —Ö–∞–∫–∞—Ç–æ–Ω–µ", 
            callback_data="hackathon_info"
        )],
        [InlineKeyboardButton(
            "Culture Deck" if language == "en" else "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –¥–µ–∫", 
            callback_data="culture_deck"
        )],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = {
        "en": "Pick one of the options below or *type your question*:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ –∏–ª–∏ *–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π*:"
    }

    if edit_message:
        await query.edit_message_text(
            message[language],
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_text(
            message[language],
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

# Simplified function that uses show_main_menu
async def show_main_menu_after_language(query, language):
    await show_main_menu(query, language, edit_message=True)

# Handle non-text messages
async def handle_non_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    language = context.user_data.get('language', 'en')
    message = {
        "en": "Sorry, I only accept text messages. Please send me a text question.",
        "ru": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å."
    }
    await update.message.reply_text(
        message[language],
        parse_mode="Markdown"
    )

# Handle messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    language = detect(user_message)  # Detect the language of the user's input

    # Initialize conversation context if not exists
    if 'last_bot_message' not in context.user_data:
        context.user_data['last_bot_message'] = None

    # Check if the question is in predefined responses
    if language == "ru":
        response = RESPONSES["ru"].get(user_message.lower())
    else:
        response = RESPONSES["en"].get(user_message.lower())

    if response:
        # Add a follow-up question to predefined responses
        follow_up = {
            "en": "\n\nWould you like to know more about this topic?",
            "ru": "\n\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–π —Ç–µ–º–µ?"
        }
        response += follow_up["ru" if language == "ru" else "en"]
        context.user_data['last_bot_message'] = response
        await update.message.reply_text(response)
    else:
        # Check if the user's message contains a question mark
        has_question = '?' in user_message

        # Get the last bot message
        last_bot_message = context.user_data.get('last_bot_message')

        # Modify the prompt based on conversation context
        if last_bot_message and not has_question:
            # If user didn't ask a question after bot's question, encourage engagement
            prompt_addition = {
                "en": "The user seems to have ignored the previous question. Acknowledge their response and try to engage them with another question.",
                "ru": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏–º–∏—Ç–µ –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ –∏—Ö –æ—Ç–≤–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–≤–ª–µ—á—å –∏—Ö –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–æ–º."
            }
            question = f"{user_message}\n\nContext: {prompt_addition['ru' if language == 'ru' else 'en']}"
        else:
            question = user_message

        response = generate_response_from_files(question, language)
        context.user_data['last_bot_message'] = response
        await update.message.reply_text(response)

# Generate a response using OpenAI and all files
def generate_response_from_files(question, language):
    if language == "ru":
        # Combine all Russian files
        combined_content = (
            FILE_CONTENT["culture_deck_ru"] + "\n\n" +
            FILE_CONTENT["hackathon_ru"] + "\n\n" +
            FILE_CONTENT["why_latoken_ru"]
        )
        system_prompt = (
            "–í—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ Latoken, –∏—Ö —Ö–∞–∫–∞—Ç–æ–Ω–µ –∏ –∏—Ö Culture Deck. "
            "–í—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
    else:
        # Combine all English files
        combined_content = (
            FILE_CONTENT["culture_deck_en"] + "\n\n" +
            FILE_CONTENT["hackathon_en"] + "\n\n" +
            FILE_CONTENT["why_latoken_en"]
        )
        system_prompt = (
            "You are a helpful assistant that answers questions about Latoken, their Hackathon, and their Culture Deck. "
            "Always end your response with a question (in a new line) to check understanding or learn more about user's interests."
        )

    prompt = (
        f"The following is a question about Latoken:\n\n{question}\n\n"
        f"Here is the relevant information:\n\n{combined_content}\n\n"
        f"Please provide a detailed and well-structured answer (maximum 600 characters) to the question, "
        f"ensuring clarity and completeness. End with a relevant follow-up question to engage the user. "
        f"The answer will be displayed through Telegram API with Markdown formatting."
    )
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0.7,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Sorry, I couldn't generate a response. Error: {str(e)}"

# Error handler
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")

# Main function
if __name__ == "__main__":
    print("Starting bot...")
    app = Application.builder().token(TOKEN).build()

    # Add handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_click))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    app.add_handler(MessageHandler(~filters.TEXT, handle_non_text))
    app.add_error_handler(error)

    # Start the bot
    print("Polling...")
    app.run_polling(poll_interval=3)